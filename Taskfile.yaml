version: '3'

env:
  ACR_NAME: bjdcsa
  
tasks:
  up:
    desc: Creates Azure infrastructure and deploys application code
    cmds:
    - terraform -chdir=./infrastructure init {{.FLAG}}
    - task: apply
    - task: creds
    - task: build
    - task: deploy
    vars:
      FLAG: '--{{.CLI_ARGS}}'

  apply: 
    desc: Applies terraform
    cmds:
    - terraform -chdir=./infrastructure apply -auto-approve
    vars:
      REGION: '{{default "southcentralus" .CLI_ARGS}}'

  creds:
    desc: Gets credential file for newly created AKS cluster
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - kubelogin convert-kubeconfig -l azurecli
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME
  
  build: 
    desc: Builds Function
    dir: src/eventprocessor
    cmds:
    - az acr login --name {{.ACR_NAME}}
    - az acr build --image {{.ACR_NAME}}.azurecr.io/functions-demo:{{.GIT_COMMIT}} --registry {{.ACR_NAME}} --file Dockerfile .
    vars:
      GIT_COMMIT: 
        sh: git rev-parse HEAD | head -c 8

  deploy:
    desc: Deploys Azure Function Demo via Helm
    cmds:
    #- helm upgrade -i workloadid --set ACR_NAME="{{.ACR_NAME}}" --set COMMIT_VERSION={{.COMMIT_VERSION}} --set APP_NAME={{.APP_NAME}} --set ARM_WORKLOAD_APP_ID={{.ARM_WORKLOAD_APP_ID}} --set ARM_TENANT_ID={{.ARM_TENANT_ID}} --set APP_INSIGHTS="{{.APP_INSIGHTS}}" ./chart
    - echo TBD
    vars:
      APP_NAME: 
        sh: terraform -chdir=./infrastructure output -raw APP_NAME
      ARM_WORKLOAD_APP_ID: 
        sh: terraform -chdir=./infrastructure output -raw ARM_WORKLOAD_APP_ID
      ARM_TENANT_ID:
        sh: terraform -chdir=./infrastructure output -raw ARM_TENANT_ID

  run:
    desc: Builds Function and Client code
    cmds:
    - echo TBD

  down:
    desc: Destorys Azure infrastructure and cleans up terraform state files
    cmds:
    - cd infrastructure ;
      rm -rf .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info
    - az group delete -n {{.RG}} --yes || true
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
